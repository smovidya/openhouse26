import { drizzle, DrizzleD1Database } from "drizzle-orm/d1";
import { schema } from "@src/db";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";
import {
  env,
  WorkflowEntrypoint,
  type WorkflowEvent,
  type WorkflowStep,
} from "cloudflare:workers";
import { id } from "zod/v4/locales";

function createDatabaseConnection(env: Env) {
  return drizzle(env.openhouse26_db, { schema, logger: true });
}

function getServiceAccountAuth(env: Env) {
  if (!env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !env.GOOGLE_PRIVATE_KEY) {
    throw new Error(
      "Google service account credentials are not set in environment variables",
    );
  }
  return new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: env.GOOGLE_PRIVATE_KEY,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });
}

async function getDoc(env: Env, serviceAccountAuth: JWT) {
  const doc = new GoogleSpreadsheet(
    "1SNYFqyhhmQ0t8mlazlEdTcNLCdXNvd6Mdygu5if6SAs",
    serviceAccountAuth,
  );
  await doc.loadInfo(); // loads document properties and worksheets
  return doc;
}

export class syncGoogleSheetWithDatabase extends WorkflowEntrypoint<Env, {}> {
  async run(event: WorkflowEvent<Params>, step: WorkflowStep) {
    const participantsData = await step.do("getParticipantData", async () => {
      const db = createDatabaseConnection(env);
      return await db.select().from(schema.participants);
    });

    const checkinRecords = await step.do("getCheckinData", async () => {
      const db = createDatabaseConnection(env);
      return await db.select().from(schema.checkins);
    });

    await step.do("updateGoogleSheet", async () => {
      const serviceAccountAuth = getServiceAccountAuth(env);
      const doc = await getDoc(env, serviceAccountAuth);
      const participantsSheet = doc.sheetsByTitle["[1.1]"];
      if (!participantsSheet) {
        throw new Error("Participants sheet not found in Google Sheet");
      }
      await participantsSheet.clearRows({
        start: 1, // clear all rows except the header
        end: participantsSheet.rowCount,
      });
      await participantsSheet.setHeaderRow([
        "id",
        "user_id",
        "given_name",
        "family_name",
        "age",
        "special_needs",
        "resident_province",
        "attendee_type",
        "school",
        "questions",
        "created_at",
        "updated_at",
        "qr_code_id",
      ]);
      await participantsSheet.addRows(
        participantsData.map((p) => ({
          id: p.id,
          user_id: p.userId,
          given_name: p.givenName,
          family_name: p.familyName,
          age: p.age,
          special_needs: p.specialNeeds,
          resident_province: p.residentProvince || "",
          attendee_type: p.attendeeType || "",
          school: p.school || "",
          questions: p.questions || "",
          created_at: p.createdAt?.toISOString() || "",
          updated_at: p.updatedAt?.toISOString() || "",
          qr_code_id: p.qrCodeId || "",
        })),
      );

      const checkinsSheet = doc.sheetsByTitle["[1.2]"];
      if (!checkinsSheet) {
        throw new Error("Check-ins sheet not found in Google Sheet");
      }
      await checkinsSheet.clearRows({
        start: 1, // clear all rows except the header
        end: checkinsSheet.rowCount,
      });
      await checkinsSheet.setHeaderRow([
        "id",
        "participant_id",
        "checked_by_staff_id",
        "checkpoint_id",
        "created_at",
        "updated_at",
        "deleted_at",
        "data",
      ]);
      await checkinsSheet.addRows(
        checkinRecords.map((c) => ({
          id: c.id,
          participant_id: c.participantId,
          checked_by_staff_id: c.checkedByStaffId,
          checkpoint_id: c.checkpointId,
          created_at: c.createdAt?.toISOString() || "",
          updated_at: c.updatedAt?.toISOString() || "",
          deleted_at: c.deletedAt?.toISOString() || "",
          data: c.data || "",
        })),
      );
    });
  }
}
