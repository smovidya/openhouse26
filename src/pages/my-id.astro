---
import MyIdHeader from "@src/assets/my-id-header.png";
import Countdown from "@src/components/countdown.svelte";
import LogoutButton from "@src/components/logout-button.svelte";
import MyWorkshop from "@src/components/my-workshop.svelte";
import NotificationReceiver from "@src/components/notification-receiver.svelte";
import QrId from "@src/components/qr-id.svelte";
import { featureFlags, workshopRegistrationDate } from "@src/data/constants";
import { workshopModel } from "@src/db";
import { getParticipantByUserId } from "@src/db/model/participant";
import NavBar from "../components/navbar.svelte";
import Layout from "../layouts/ContentLayout.astro";
import { getToken } from "@src/notification/server";

const uid = Astro.locals.user?.id;
if (!uid) {
  return Astro.redirect("/");
}

const participant = await getParticipantByUserId(Astro.locals.db, uid);
if (!participant) {
  return Astro.redirect("/register");
}

// this explode sometime, dont forget to run the sse worker simultaneously too
// console.log((Astro.locals.runtime.env.SSE as any as SSEWorkerRpc).double(12))

// const id = participant.id;
const id = participant.qrCodeId || participant.id;
const name = participant.givenName;

const staging = Astro.locals.runtime.env.ENVIRONMENT === "staging";
const showWorkshop =
  staging || import.meta.env.DEV || featureFlags.workshopRegistration;

const selectedWorkshops = await workshopModel.getUserRegisteredSlots(
  Astro.locals.db,
  uid
);

const wsUrl = Astro.locals.runtime.env.SSE_URL;
const token = await getToken(
  Astro.locals.runtime.env.SSE_PRIVATE_KEY,
  participant.id
);
---

<Layout title="‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å">
  <!-- TODO: nav -->
  <NavBar class="fixed! inset-x-0! top-3 z-50" />

  <main class="relative mt-12 w-full overflow-x-clip text-sm">
    <!-- TODO: resize this -->
    <img
      src={MyIdHeader.src}
      alt="MyID Header"
      class="relative z-3 mx-auto w-2/3 max-w-full object-cover sm:max-w-100"
    />
    <section
      id="my-id-card"
      class="shadow-base-100/40 mx-auto mt-7 flex max-w-78 [transform-origin:_center_-100px] flex-col rounded-xl bg-[#FBB84B] shadow-md transition-transform duration-75 ease-in-out"
    >
      <div>
        <div class="relative flex flex-col items-center">
          <div class="back-strap absolute bottom-7 ml-9"></div>
          <div id="yellow-fill" class="absolute top-0 h-4 w-23 bg-[#FBB84B]">
          </div>
          <div class="front-strap absolute bottom-7 mr-9"></div>
          <div
            class="inset-shadow-md z-2 mx-auto my-4 h-6 w-23 rounded-full bg-[#3f60b4] shadow-inner shadow-black/50"
          >
          </div>
        </div>
        <p class="px-2 pb-1 text-center leading-5 text-amber-900/60">
          ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR ‡πÑ‡∏î‡πâ
        </p>
      </div>
      <div
        class="qr-bg flex flex-col items-center p-10 pb-3 shadow-sm shadow-black/20"
      >
        <div
          class="aspect-square w-58 overflow-clip rounded-md border border-slate-500 bg-white p-2 text-white shadow-inner shadow-black/20"
        >
          <QrId client:only content={id ?? "not-loggedin"} />
        </div>
        <h3 class="mt-2 text-xl font-medium text-white">{name}</h3>
        <h3
          class="font-mono text-xs font-medium text-nowrap whitespace-nowrap text-slate-400"
        >
          ID: {id}
        </h3>
      </div>
      <div class="p-6">
        <!-- <button
          class="block text-center mx-auto py-2 rounded-lg w-48 bg-red-50"
        >
          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        </button> -->
      </div>
    </section>
  </main>

  {
    !showWorkshop ? (
      <>
        <section class="mt-8 font-serif text-sm text-blue-300/85">
          <h2 class="text-2xl text-white">My workshops</h2>
        </section>
        <section class="text-md metal-bg relative mt-6 rounded-3xl bg-neutral-100 p-2 text-center shadow-lg shadow-black/20">
          <div class="metal-strip-2 absolute inset-2 translate-[0.3px] rounded-2xl" />
          <div class="metal-strip relative z-2 flex flex-col rounded-2xl pt-2 pb-4">
            <div class="space-y-2 p-4 pb-2">
              <span class="text-2xl"> üîí </span>
              <h3>
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° ‡πÄ‡∏ß‡∏•‡∏≤ 18:00 ‡∏ô.
              </h3>
              <span class="text-xs text-neutral-500">
                (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ 09:00 ‡∏ô. ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å üôá‚Äç‚ôÇÔ∏è)
              </span>
            </div>
            <Countdown
              client:load
              to={workshopRegistrationDate.getTime()}
              class="mt-2 mb-2 gap-2! px-2 text-neutral-500 md:gap-6!"
            />
          </div>
        </section>
      </>
    ) : (
      <MyWorkshop selectedWorkshops={selectedWorkshops} class="mt-6" />
    )
  }
  <div class="mt-10 flex justify-center">
    <LogoutButton client:load> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö </LogoutButton>
  </div>
  <NotificationReceiver wsUrl={wsUrl} token={token} client:only />
</Layout>

<style>
  .front-strap {
    width: 2.5rem;
    height: 6rem;
    transform: rotate(-22deg);
    background-color: rgb(182, 222, 233);
  }

  .back-strap {
    width: 2.5rem;
    height: 6rem;
    transform: rotate(22deg);
    background-color: rgb(139, 171, 181);
  }

  .qr-bg {
    background: linear-gradient(
      224deg,
      #3c5baa -10.23%,
      #3c5595 33.26%,
      #3b5186 60.29%,
      #15285b 104.36%
    );
  }

  .metal-bg {
    background: linear-gradient(
      180deg,
      #d9d9d9 0%,
      #d9d9d9 11.14%,
      #b6b6b6 34.13%,
      #d9d9d9 100%
    );
  }

  .metal-strip {
    border: 2px dashed #c8c8c8;
    /* box-shadow:
      0 0 4px 0 rgba(0, 0, 0, 0.25) inset,
      0.25px 0.25px 0 0 rgba(255, 255, 255, 0.5); */
  }

  .metal-strip-2 {
    border: 2px dashed #fefefe;
    /* box-shadow:
      0 0 4px 0 rgba(0, 0, 0, 0.25) inset,
      0.25px 0.25px 0 0 rgba(255, 255, 255, 0.5); */
  }
</style>

<script>
  (() => {
    const el = document.getElementById("my-id-card");
    if (el) {
      el.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        return false;
      });
    }

    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    if (!isMobile) return;
    window.addEventListener("deviceorientation", (event) => {
      if (!el) return;
      if (!event.gamma || !event.beta) return;
      console.log({ gamma: event.gamma, beta: event.beta });
      el.style.transform = `rotate(${Math.min(Math.max(((event.beta <= 90 ? -1 : 1) * event.gamma) / 6, -20), 20)}deg)`;
    });
  })();
</script>
